#include <WiFi.h>
#include <DHT.h>
#include <vector>

#define DHTPIN 4
#define DHTTYPE DHT22
#define LED1 19
#define LED2 23

#define WIFI_SSID "VIVOFIBRA-0FB0"
#define WIFI_PASSWORD "BAD33538A8"

DHT dht(DHTPIN, DHTTYPE);

WiFiServer server(80);
std::vector<float> temperaturas;
std::vector<float> umidades;

void setup() {
  Serial.begin(115200);
  dht.begin();

  pinMode(LED1, OUTPUT);
  pinMode(LED2, OUTPUT);

  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Conectando-se ao WiFi...");
  }
  Serial.println("Conectado ao WiFi!");
  Serial.print("IP do ESP32: ");
  Serial.println(WiFi.localIP());

  server.begin();
}

void loop() {
  WiFiClient client = server.available();

  if (client) {
    Serial.println("Novo cliente conectado");
    String currentLine = "";

    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        Serial.write(c);

        if (c == '\n' && currentLine.length() == 0) {
          float temp = dht.readTemperature();
          float umidade = dht.readHumidity();

          if (isnan(temp) || isnan(umidade)) {
            client.println("HTTP/1.1 500 Internal Server Error");
            client.println("Content-Type: text/plain");
            client.println();
            client.println("Falha na leitura do sensor DHT22");
            break;
          }

          if (temperaturas.size() >= 50) temperaturas.erase(temperaturas.begin());
          if (umidades.size() >= 50) umidades.erase(umidades.begin());
          temperaturas.push_back(temp);
          umidades.push_back(umidade);

          float media_temp = 0;
          for (float t : temperaturas) media_temp += t;
          media_temp /= temperaturas.size();

          String colorText = "#333333";
          String colorCondition = "#333333";

          if (temp >= 20 && temp <= 30) {
            digitalWrite(LED1, HIGH);
            digitalWrite(LED2, LOW);
          } else {
            digitalWrite(LED1, LOW);
            digitalWrite(LED2, HIGH);
          }

          String colorChartTempBorder;
          String colorChartTempBackground;
          String colorChartUmidBorder;
          String colorChartUmidBackground;

          if (temp >= 20 && temp <= 30) {
            colorChartTempBorder = "rgba(0,128,0,1)";
            colorChartTempBackground = "rgba(0,128,0,0.2)";
          } else {
            colorChartTempBorder = "rgba(139,0,0,1)";
            colorChartTempBackground = "rgba(139,0,0,0.2)";
          }

          if (temp >= 20 && temp <= 30 && umidade >= 60) {
            colorChartUmidBorder = "rgba(0,128,0,1)";
            colorChartUmidBackground = "rgba(0,128,0,0.2)";
          } else {
            colorChartUmidBorder = "rgba(139,0,0,1)";
            colorChartUmidBackground = "rgba(139,0,0,0.2)";
          }

          String jsonTemps = "[";
          for (size_t i = 0; i < temperaturas.size(); i++) {
            jsonTemps += String(temperaturas[i], 2);
            if (i < temperaturas.size() - 1) jsonTemps += ",";
          }
          jsonTemps += "]";

          String jsonUmid = "[";
          for (size_t i = 0; i < umidades.size(); i++) {
            jsonUmid += String(umidades[i], 2);
            if (i < umidades.size() - 1) jsonUmid += ",";
          }
          jsonUmid += "]";

          client.println("HTTP/1.1 200 OK");
          client.println("Content-Type: text/html");
          client.println("Connection: close");
          client.println();

          client.println("<!DOCTYPE html><html><head><title>Sensor OMC</title>");
          client.println("<script src='https://cdn.jsdelivr.net/npm/chart.js'></script>");
          client.println("<style>");
          client.println(R"rawliteral(
            @import url('https://fonts.googleapis.com/css2?family=Rubik+Moonrocks&family=Orbitron:wght@700&display=swap');

            * {
              margin: 0;
              padding: 0;
              box-sizing: border-box;
            }

            body {
              font-family: 'Arial';
              background: linear-gradient(135deg, #d0e6f7, #e3f2fd, #f0f4f8);
              color: )rawliteral" + colorText + R"rawliteral(;
              padding: 30px 15px;
              min-height: 100vh;
              display: flex;
              flex-direction: column;
              align-items: center;
              overflow-x: hidden;
            }

            h1 {
              font-family: 'Arial';
              font-size: 3.5rem;
              margin-bottom: 25px;
              text-align: center;
              color: )rawliteral" + colorText + R"rawliteral(;
            }

            p {
              font-size: 1.4rem;
              text-align: center;
              margin: 12px 0;
              color: )rawliteral" + colorText + R"rawliteral(;
              text-shadow: none;
              font-weight: normal;
            }

            .canvas-container {
              display: flex;
              flex-direction: column;
              align-items: center;
              width: 90vw;
              max-width: 750px;
              gap: 40px;
              margin-top: 40px;
              background: rgba(255, 255, 255, 0.85);
              padding: 25px;
              border-radius: 20px;
              box-shadow: 0 0 15px rgba(120, 150, 180, 0.3);
              backdrop-filter: blur(6px);
              color: )rawliteral" + colorText + R"rawliteral(;
            }

            canvas {
              width: 100% !important;
              height: 320px !important;
              border-radius: 15px;
              background: linear-gradient(135deg, #cbdcf3, #e5f0fb);
              box-shadow: 0 4px 12px rgba(100, 120, 160, 0.5);
              cursor: default;
              transition: none;
            }

            a {
              display: inline-block;
              margin-top: 25px;
              padding: 14px 36px;
              font-family: 'Orbitron', sans-serif;
              font-weight: 700;
              font-size: 1.3rem;
              text-transform: uppercase;
              color: #fff;
              background: linear-gradient(45deg, #7a9cc6, #8fb7de);
              border-radius: 50px;
              box-shadow: 0 0 15px #7a9cc6, 0 0 30px #8fb7de;
              text-decoration: none;
              transition: background 0.5s ease, box-shadow 0.5s ease;
              user-select: none;
            }

            a:hover {
              background: linear-gradient(45deg, #8fb7de, #7a9cc6);
              box-shadow: 0 0 25px #8fb7de, 0 0 45px #7a9cc6;
              transform: scale(1.05);
            }

            .condition {
              font-weight: normal;
              font-size: 1.4rem;
              color: )rawliteral" + colorCondition + R"rawliteral(;
              text-shadow: none;
              margin-top: 15px;
              text-align: center;
            }

            meta[http-equiv="refresh"] {
              display: none;
            }
          )rawliteral");
          client.println("</style></head><body>");
          client.println("<meta http-equiv='refresh' content='8'>");

          client.println("<h1>Temperatura e Umidade</h1>");
          client.println("<p>Temperatura atual: " + String(temp) + " °C</p>");
          client.println("<p>Umidade atual: " + String(umidade) + " %</p>");

          if (temp >= 20 && temp <= 30 && umidade >= 60) {
            client.println("<p class='condition'>Condicoes favoraveis para formacao de mofo</p>");
          } else {
            client.println("<p class='condition'>Condicoes desfavoraveis para formacao de mofo</p>");
          }

          client.println("<p>Media das temperaturas (ultimas leituras): " + String(media_temp, 2) + " °C</p>");

          client.println("<div class='canvas-container'>");
          client.println("<canvas id='tempChart'></canvas>");
          client.println("<canvas id='umidChart'></canvas>");
          client.println("</div>");

          client.println("<script>");
          client.println("const tempData = " + jsonTemps + ";");
          client.println("const umidData = " + jsonUmid + ";");
          client.println("const labels = tempData.map((_, i) => i + 1);");

          client.println("new Chart(document.getElementById('tempChart').getContext('2d'), {");
          client.println("  type: 'line',");
          client.println("  data: { labels: labels, datasets: [{ label: 'Temperatura (°C)', data: tempData, borderColor: '" + colorChartTempBorder + "', backgroundColor: '" + colorChartTempBackground + "', fill: true, tension: 0.1 }] },");
          client.println("  options: { scales: { y: { beginAtZero: false } }, responsive: true, interaction: { mode: 'nearest', intersect: false } }");
          client.println("});");

          client.println("new Chart(document.getElementById('umidChart').getContext('2d'), {");
          client.println("  type: 'line',");
          client.println("  data: { labels: labels, datasets: [{ label: 'Umidade (%)', data: umidData, borderColor: '" + colorChartUmidBorder + "', backgroundColor: '" + colorChartUmidBackground + "', fill: true, tension: 0.1 }] },");
          client.println("  options: { scales: { y: { beginAtZero: false } }, responsive: true, interaction: { mode: 'nearest', intersect: false } }");
          client.println("});");

          client.println("</script>");

          client.println("<p><a href='/'>Atualizar</a></p>");
          client.println("</body></html>");

          break;
        } else if (c == '\n') {
          currentLine = "";
        } else if (c != '\r') {
          currentLine += c;
        }
      }
    }
    client.stop();
    Serial.println("Cliente desconectado");
  }
}
